<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <controller_preset/>
        <includes/>
        <macroponent display_value="Qn-Site Work Request Record Page">07d070392bda9a5091cffd80de91bf32</macroponent>
        <name>New client script 3</name>
        <preset/>
        <required_translations>[]</required_translations>
        <script><![CDATA[/**
* @param {params} params
* @param {api} params.api
* @param {any} params.event
* @param {any} params.imports
* @param {ApiHelpers} params.helpers
*/
function handler (event, api) => {
    // 状態管理用変数
    let mediaRecorder = null;
    let audioChunks = [];
    let audioBlob = null;

    // 録音開始
    const startRecording = async () => {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            mediaRecorder = new MediaRecorder(stream);
            audioChunks = [];

            mediaRecorder.ondataavailable = (event) => {
                audioChunks.push(event.data);
            };

            mediaRecorder.start();
            api.setState('recordButtonDisabled', true); // 録音ボタンを無効化
            api.setState('stopButtonDisabled', false); // 停止ボタンを有効化
        } catch (error) {
            console.error("マイクへのアクセスに失敗:", error);
            api.showError("マイクのアクセスを許可してください。");
        }
    };

    // 録音停止
    const stopRecording = () => {
        if (mediaRecorder) {
            mediaRecorder.stop();

            mediaRecorder.onstop = () => {
                audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                const audioUrl = URL.createObjectURL(audioBlob);
                api.setState('audioUrl', audioUrl); // 再生URLを更新
                api.setState('recordButtonDisabled', false); // 録音ボタンを有効化
                api.setState('stopButtonDisabled', true); // 停止ボタンを無効化
            };
        }
    };

    // アップロード
    const uploadAudio = async () => {
        if (!audioBlob) {
            api.showError("録音データがありません。録音してください。");
            return;
        }

        const reader = new FileReader();
        reader.onloadend = async () => {
            const base64Data = reader.result.split(',')[1];
            const requestBody = {
                table_name: "x_snc_7_on_site_0_qn_site_work_request",
                sys_id: "c6a347f22bdede5091cffd80de91bffd",
                file_name: "recording.wav",
                base64Data: base64Data
            };

            try {
                const response = await api.action('sendAudioToServer', requestBody);
                api.showSuccess("録音データがアップロードされました！");
            } catch (error) {
                console.error("アップロードに失敗:", error);
                api.showError("アップロード中にエラーが発生しました。");
            }
        };

        reader.readAsDataURL(audioBlob);
    };

    // イベントの割り当て
    if (event.type === 'record') {
        startRecording();
    } else if (event.type === 'stop') {
        stopRecording();
    } else if (event.type === 'upload') {
        uploadAudio();
    }
};]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-23 06:12:01</sys_created_on>
        <sys_id>88d2fa022b6e12d091cffd80de91bf79</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>New client script 3</sys_name>
        <sys_package display_value="7_On-site Work Request" source="x_snc_7_on_site_0">144ae0fd2b9a9a5091cffd80de91bfeb</sys_package>
        <sys_policy/>
        <sys_scope display_value="7_On-site Work Request">144ae0fd2b9a9a5091cffd80de91bfeb</sys_scope>
        <sys_update_name>sys_ux_client_script_88d2fa022b6e12d091cffd80de91bf79</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-23 06:12:01</sys_updated_on>
        <target>macroponent</target>
        <type>default</type>
    </sys_ux_client_script>
</record_update>
