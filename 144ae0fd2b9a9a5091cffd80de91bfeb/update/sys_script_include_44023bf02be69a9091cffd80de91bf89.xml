<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_7_on_site_0.AudioModel</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>AudioModel</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[// AudioModel.js
var AudioModel = Class.create();
AudioModel.prototype = Object.extendsObject(AbstractAjaxProcessor, {
    startRecording: function() {
        var g_ck = g_user.getToken(); // CSRFトークンを取得

        // 録音開始処理
        navigator.mediaDevices.getUserMedia({ audio: true })
            .then(function(stream) {
                var mediaRecorder = new MediaRecorder(stream);
                var audioChunks = [];

                mediaRecorder.ondataavailable = function(event) {
                    audioChunks.push(event.data);
                };

                mediaRecorder.onstop = function() {
                    var audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                    var formData = new FormData();
                    formData.append('audio', audioBlob, 'recording.wav');
                    
                    // APIリクエストのファイルアップロード処理
                    fetch('/api/now/attachment/file?table_name=x_snc_7_on_site_0_qn_site_work_request&table_sys_id=' + g_form.getUniqueValue(), {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'X-UserToken': g_ck // CSRFトークンを追加
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        gs.info('Audio uploaded successfully!');
                    })
                    .catch(error => {
                        gs.error('Error uploading audio: ' + error);
                    });
                };

                mediaRecorder.start(); // 録音開始
            })
            .catch(function(err) {
                gs.error('Error accessing the microphone: ' + err);
            });
    },
    
    stopRecording: function() {
        if (mediaRecorder && mediaRecorder.state === "recording") {
            mediaRecorder.stop();
        }
    }
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-16 08:52:17</sys_created_on>
        <sys_id>44023bf02be69a9091cffd80de91bf89</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>AudioModel</sys_name>
        <sys_package display_value="7_On-site Work Request" source="x_snc_7_on_site_0">144ae0fd2b9a9a5091cffd80de91bfeb</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="7_On-site Work Request">144ae0fd2b9a9a5091cffd80de91bfeb</sys_scope>
        <sys_update_name>sys_script_include_44023bf02be69a9091cffd80de91bf89</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-16 09:12:09</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>44023bf02be69a9091cffd80de91bf89</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-16 08:52:16</sys_created_on>
        <sys_id>9ad2fbf02be69a9091cffd80de91bffb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-16 08:52:16</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
